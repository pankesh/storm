apply plugin: 'java'
apply plugin: 'eclipse'

sourceCompatibility = 1.6
version = '1.0'

task wrapper(type: Wrapper) {
    gradleVersion = '2.0'
}

jar {
    manifest {
        attributes 'Implementation-Title': 'Gradle Quickstart', 'Implementation-Version': version
    }
}

repositories {
    mavenCentral()

    maven {
        url "http://clojars.org/repo"
    }
}

configurations {

  //needed to avoid stack overflow error with log4j
  runtime.exclude group: "org.slf4j", module: "slf4j-log4j12"
  runtime.exclude group: "javax.jms", module: "jms"
  runtime.exclude group: "com.sun.jdmk", module: "jmxtools"
  runtime.exclude group: "com.sun.jmx", module: "jmxri"

  //error when running trident-memcached
  runtime.exclude group: "ch.qos.logback", module: "logback-classic"

  //to ignore unavailable twitter zookeeper transitive dependencies
  compile.exclude module: 'util-zk-common_2.11' 
  compile.exclude module: 'server-set'


  //created this configuration so that we can control what jars are packaged when creating
  // the full storm topology jar with all the required runtime dependencies
  provided

  compile.extendsFrom provided

}

dependencies {
    provided 'org.apache.storm:storm:0.9.2-incubating',
    'org.apache.storm:storm-core:0.9.2-incubating'

    compile 'org.twitter4j:twitter4j-stream:3.0.3',
    'commons-collections:commons-collections:3.2.1',
    'com.twitter:carbonite:1.4.0',
    'com.esotericsoftware.kryo:kryo:2.21',
    'org.apache.storm:storm-kafka:0.9.2-incubating',
    'org.apache.kafka:kafka_2.10:0.8.1.1'

  compile 'org.slf4j:slf4j-simple:1.6.4'

    //needed for twitter-memcached
    compile 'com.twitter:util-core_2.11:6.23.0',
        'com.twitter:util-collection_2.11:6.23.0',
        'com.twitter:util-logging_2.11:6.23.0',
        'com.twitter:finagle-core_2.11:6.24.0',
        'com.twitter:finagle-memcached_2.11:6.24.0',
        'com.thimbleware.jmemcached:jmemcached-cli:1.0.0'


    testCompile 'junit:junit:4.+',
     'org.mockito:mockito-all:1.8.2'
}

jar {
    dependsOn configurations.runtime
    from {
        (configurations.runtime - configurations.provided).collect {
            it.isDirectory() ? it : zipTree(it)
        }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
}
